devtools::check()
remove.packages("CauchyGM")
setwd("/Users/Yeonil/Desktop")
install.packages("CauchyGM_0.1.tar.gz",
repos = NULL, type = "source")
library(CauchyGM)
load("/Users/Yeonil/Desktop/sysdata.rda")
data <- data_BT
colnames(data$Z) <- c("X1", "X2")
outcome <- "D"
formula <- ~ X1 + X2
Cauchy_Null <- Cauchy_Null_model(formula, data, out_type = outcome)
Cauchy_Null
ls(Cauchy_Null)
design.Z  <- model.matrix(formula, data.frame(data$Z))[, -1]
if(outcome == "D") {
SKAT_Null <- SKAT_Null_Model_MomentAdjust(data$Y ~ design.Z,
type.Resampling = "bootstrap.fast")
} else if (outcome == "C"){
SKAT_Null <- SKAT_Null_Model(data$Y ~ design.Z, out_type = outcome, Adjustment = TRUE,
type.Resampling = "bootstrap.fast")
}
CGM_pval <- CauchyGM(data, method = "CauchyGM", out_type = outcome, int = 0.5, weights.beta = c(1, 1),
Cauchy_Null = Cauchy_Null, SKAT_Null = SKAT_Null)
data
data
CauchyGM(data, method = "CauchyGM", out_type = outcome, int = 0.5, weights.beta = c(1, 1),
Cauchy_Null = Cauchy_Null, SKAT_Null = SKAT_Null)
Cauchy_Null
y <- data$Y
Z <- data.frame(data$Z)
formula
design.Z <- model.matrix(formula, Z)[, -1]
Y_design.Z <- data.frame(y, design.Z)
null_model <- as.formula(paste("y ~ ", paste(colnames(design.Z), collapse = "+")))
null_model
lm_null <- glm(null_model, data = Y_design.Z, family = "binomial")
lm_null
ls(lm_null)
lm_null$fitted
lm_null$residuals
list(fitted = lm_null$fitted, residuals = lm_null$residuals)
null <- list(fitted = lm_null$fitted, residuals = lm_null$residuals)
null
ls(null)
null$fitted
null$residuals
G = data$X_add
y
Z
G = as.matrix(G)
Z = data$Z
n = length(y)
Z = as.matrix(Z)
Z
null_obj = null
p_hat = null_obj$fitted
p_hat
Z = cbind(rep(1, n), Z)  # adding one column in covariate matrix for intercept (n x q+1)
p = dim(Z)[2]
resid = (y - p_hat)
y = array(rep(y, m), c(n, m))
m = dim(G)[2]
y = array(rep(y, m), c(n, m))
p_hat = array(rep(p_hat, m), c(n, m))
pp_hat = p_hat * (1 - p_hat)
# score function for beta1
s_b1_i = array(rep(resid, m), c(n, m)) * G  # n x m
s_b1 = colSums(s_b1_i)
# score function for sigma = (b0 and delta)
s_sigma_i = Z * array(rep(resid, p), c(n, p))  # n x q+1
# I(beta1, sigma = c(beta0, delta))
I.b1.sig = -t(t(Z) %*% (pp_hat * G))  # m x (q+1)
# I(sigma, sigma)
s_sigma = Z * array(rep(pp_hat[, 1], p), c(n, p))  # n x q+1
I.sig.sig = -t(Z) %*% s_sigma  # q+1 x q+1
# individual score function for beta1
U_nus = t(I.b1.sig %*% ginv(I.sig.sig) %*% t(s_sigma_i))  # n x m
U = s_b1_i - U_nus  # n x m
V = colSums(U^2)
if (!is.null(Z)) {
# score function for beta1
s_b1_i = array(rep(resid, m), c(n, m)) * G  # n x m
s_b1 = colSums(s_b1_i)
# score function for sigma = (b0 and delta)
s_sigma_i = Z * array(rep(resid, p), c(n, p))  # n x q+1
# I(beta1, sigma = c(beta0, delta))
I.b1.sig = -t(t(Z) %*% (pp_hat * G))  # m x (q+1)
# I(sigma, sigma)
s_sigma = Z * array(rep(pp_hat[, 1], p), c(n, p))  # n x q+1
I.sig.sig = -t(Z) %*% s_sigma  # q+1 x q+1
# individual score function for beta1
U_nus = t(I.b1.sig %*% ginv(I.sig.sig) %*% t(s_sigma_i))  # n x m
U = s_b1_i - U_nus  # n x m
V = colSums(U^2)
} else {
## no covariates
Z = array(rep(1, n), c(n, 1))  # adding one column for intercept (n x 1)
dim_Z = 1  # dim Z = 1
# score function for beta1
s_b1_i = array(rep(resid, m), c(n, m)) * G  # n x m
s_b1 = colSums(s_b1_i)
# score function for sigma = (b0 and delta)
s_sigma_i = array(resid, c(n, 1))  # n x 1
# I(beta1, sigma = c(beta0, delta))
I.b1.sig = -colSums(pp_hat * G)  # m x 1
# I(sigma, sigma)
I.sig.sig = -sum(pp_hat[, 1])  # 1 x 1 scalar
# individual score function for beta1
U_nus = t((I.b1.sig * I.sig.sig^(-1)) %*% t(s_sigma_i))  # n x m
U = s_b1_i - U_nus  # n x m
V = colSums(U^2)
}
if (out_type == "D") {
p_hat = null_obj$fitted
Z = cbind(rep(1, n), Z)  # adding one column in covariate matrix for intercept (n x q+1)
p = dim(Z)[2]
resid = (y - p_hat)
y = array(rep(y, m), c(n, m))
p_hat = array(rep(p_hat, m), c(n, m))
pp_hat = p_hat * (1 - p_hat)
if (!is.null(Z)) {
# score function for beta1
s_b1_i = array(rep(resid, m), c(n, m)) * G  # n x m
s_b1 = colSums(s_b1_i)
# score function for sigma = (b0 and delta)
s_sigma_i = Z * array(rep(resid, p), c(n, p))  # n x q+1
# I(beta1, sigma = c(beta0, delta))
I.b1.sig = -t(t(Z) %*% (pp_hat * G))  # m x (q+1)
# I(sigma, sigma)
s_sigma = Z * array(rep(pp_hat[, 1], p), c(n, p))  # n x q+1
I.sig.sig = -t(Z) %*% s_sigma  # q+1 x q+1
# individual score function for beta1
U_nus = t(I.b1.sig %*% ginv(I.sig.sig) %*% t(s_sigma_i))  # n x m
U = s_b1_i - U_nus  # n x m
V = colSums(U^2)
} else {
## no covariates
Z = array(rep(1, n), c(n, 1))  # adding one column for intercept (n x 1)
dim_Z = 1  # dim Z = 1
# score function for beta1
s_b1_i = array(rep(resid, m), c(n, m)) * G  # n x m
s_b1 = colSums(s_b1_i)
# score function for sigma = (b0 and delta)
s_sigma_i = array(resid, c(n, 1))  # n x 1
# I(beta1, sigma = c(beta0, delta))
I.b1.sig = -colSums(pp_hat * G)  # m x 1
# I(sigma, sigma)
I.sig.sig = -sum(pp_hat[, 1])  # 1 x 1 scalar
# individual score function for beta1
U_nus = t((I.b1.sig * I.sig.sig^(-1)) %*% t(s_sigma_i))  # n x m
U = s_b1_i - U_nus  # n x m
V = colSums(U^2)
}
} else if (out_type == "C") {
Z = cbind(rep(1, n), Z)  # adding one column in covariate matrix for intercept (n x q+1)
p = dim(Z)[2]
resid = null_obj$residuals
var = (1/n) * sum(resid^2)
y = array(rep(y, m), c(n, m))
if (!is.null(Z)) {
U = array(rep(resid, m), c(n, m)) * G  #n x m
cov_Z = t(Z) %*% Z
var2 = numeric(m)
for (i in 1:m) {
G_temp = array(rep(G[, i], p), c(n, p))
GZ = G_temp * Z
GZ = colSums(GZ)
var2[i] = t(GZ) %*% solve(cov_Z) %*% GZ
}
V = var * (colSums(G^2) - var2)
} else {
# score for beta1
s_b1_i = array(rep(resid, m), c(n, m)) * G  # n x m
s_b1 = colSums(s_b1_i)  # 1 x m
# score for sigma
s_b0_i = resid
s_b0 = sum(resid)
s_b0_sq_i = resid^2
s_b0_sq = sum(resid^2)
s_sigma_i = cbind((1/var) * s_b0_i, (-1/2) * (1/var) + (1/(2 * var^2)) * s_b0_sq_i)  # n x 2
# I(beta1, sigma=c(beta0, var))
I.1.1 = -(1/var) * colSums(G)
I.1.2 = -(1/var^2) * s_b1
I.b1.sig = cbind(I.1.1, I.1.2)  # m x 2
# I(sigma, sigma)
I.2.11 = -n/(var)
I.2.12 = -1/(var^2) * s_b0
I.2.22 = n/(2 * var^2) - 1/(var^3) * s_b0_sq
I.sig.sig = matrix(c(I.2.11, I.2.12, I.2.12, I.2.22), nrow = 2)
U_nus = t(I.b1.sig %*% ginv(I.sig.sig) %*% t(s_sigma_i))  # n x m
U = s_b1_i - U_nus
V = colSums(U^2)
}
}
return(list(U = U, V = V))
lm_null
lm_null <- glm(null_model, data = Y_design.Z, family = "binomial")
ls(null_model)
ls(lm_null)
lm_null$model
lm_null <- lm(null_model, data = Y_design.Z)
ls(lm_null)
lm_null$model
lm_null$residuals
lm_null$fitted
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM/R")
formatR::tidy_dir()
setwd("/Users/Yeonil/Desktop/CauchyGM")
usethis::use_rcpp()
setwd("/Users/Yeonil/Desktop/CauchyGM")
Rcpp::compileAttributes()
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::check()
devtools::build()
gridG
setwd("/Users/Yeonil/Desktop/CauchyGM_R/CauchyGM")
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM/R")
formatR::tidy_dir()
setwd("/Users/Yeonil/Desktop/CauchyGM")
usethis::use_rcpp()
setwd("/Users/Yeonil/Desktop/CauchyGM")
Rcpp::compileAttributes()
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::check()
devtools::build()
#devtools::install()
remove.packages("CauchyGM")
devtools::build()
#devtools::install()
remove.packages("CauchyGM")
setwd("/Users/Yeonil/Desktop")
install.packages("CauchyGM_0.1.tar.gz",
repos = NULL, type = "source")
library(CauchyGM)
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM/R")
formatR::tidy_dir()
setwd("/Users/Yeonil/Desktop/CauchyGM")
usethis::use_rcpp()
setwd("/Users/Yeonil/Desktop/CauchyGM")
Rcpp::compileAttributes()
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM/R")
formatR::tidy_dir()
setwd("/Users/Yeonil/Desktop/CauchyGM")
usethis::use_rcpp()
setwd("/Users/Yeonil/Desktop/CauchyGM")
Rcpp::compileAttributes()
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::check()
devtools::build()
#devtools::install()
remove.packages("CauchyGM")
setwd("/Users/Yeonil/Desktop")
install.packages("CauchyGM_0.1.tar.gz",
repos = NULL, type = "source")
library(CauchyGM)
library(SKAT)
setwd("/Users/Yeonil/Desktop/CauchyGM")
load("/Users/Yeonil/Desktop/sysdata.rda")
data <- data_BT
colnames(data$Z) <- c("X1", "X2")
outcome <- "D"
formula <- ~ X1 + X2
Cauchy_Null <- Cauchy_Null_model(formula, data, out_type = outcome)
design.Z  <- model.matrix(formula, data.frame(data$Z))[, -1]
if(outcome == "D") {
SKAT_Null <- SKAT_Null_Model_MomentAdjust(data$Y ~ design.Z,
type.Resampling = "bootstrap.fast")
} else if (outcome == "C"){
SKAT_Null <- SKAT_Null_Model(data$Y ~ design.Z, out_type = outcome, Adjustment = TRUE,
type.Resampling = "bootstrap.fast")
}
CGM_pval <- CauchyGM(data, method = "CauchyGM", out_type = outcome, int = 0.5, weights.beta = c(1, 1),
Cauchy_Null = Cauchy_Null, SKAT_Null = SKAT_Null)
int = 0.5
seqC <- seq(0, 1, by = int)
y <- data$Y
g <- data$X_add
covar <- Cauchy_Null$model[, -1]
n <- length(y)
m <- length(seqC)
## Dimension of genotype data and creating grid for genotype data
dim = dim(g)[2]
p <- dim
grid.g = array(0, c(n, m, p))
for (j in 1:p) {
grid.g[, , j] = CauchyGM:::gridG(g[, j], seqC)
}
L <- c()
ind_list <- list()
for (c in 1:m) {
MAF_ind <- MAF(2 * grid.g[, c, 1:p])
ind_rm <- which((MAF_ind < 0.01) == TRUE)
ind_list[[c]] <- ind_rm
L <- c(L, c(length(ind_rm)))
}
ind <- array(NA, c(p, m))
pval <- c()
for (c in 1:m) {
if (L[c] == p) {
burden_pval = SKAT(as.matrix(2 * grid.g[, c, ]), SKAT_Null, weights.beta = c(1, 25), r.corr = 1)$p.value
pval = c(pval, burden_pval)
ind[, c] <- 0
} else if (L[c] < p) {
if (L[c] == 0) {
U_V = eff_Score(y, grid.g[, c, ], Z = covar, Cauchy_Null, out_type = out_type)
score = colSums(U_V[[1]])^2/U_V[[2]]
pval = c(pval, 1 - pchisq(score, 1))
ind[, c] <- 1:p
} else {
grid.g_common = grid.g[, c, -ind_list[[c]]]
grid.g_rare = grid.g[, c, ind_list[[c]]]
U_V = eff_Score(y, grid.g_common, Z = covar, Cauchy_Null, out_type = out_type)
score = colSums(U_V[[1]])^2/U_V[[2]]
pval = c(pval, 1 - pchisq(score, 1))
burden_pval = SKAT(as.matrix(2 * grid.g_rare), SKAT_Null, weights.beta = c(1, 25), r.corr = 1)$p.value
pval = c(pval, burden_pval)
}
ind[ind_list[[c]], c] <- 0
ind[-ind_list[[c]], c] <- c(1:p)[-ind_list[[c]]]
}
}
burden_pval = SKAT(as.matrix(2 * grid.g[, c, ]), SKAT_Null, weights.beta = c(1, 25), r.corr = 1)$p.value
pval = c(pval, burden_pval)
U_V = eff_Score(y, grid.g[, c, ], Z = covar, Cauchy_Null, out_type = out_type)
covar
Cauchy_Null
## usethis namespace: start
#' @importFrom Rcpp sourceCpp
## usethis namespace: end
NUL
Cauchy_Null
ls(CauchyGM)
ls(Cauchy_Null)
covar <- Cauchy_Null$null.model[, -1]
n <- length(y)
m <- length(seqC)
## Dimension of genotype data and creating grid for genotype data
dim = dim(g)[2]
p <- dim
grid.g = array(0, c(n, m, p))
for (j in 1:p) {
grid.g[, , j] = CauchyGM:::gridG(g[, j], seqC)
}
L <- c()
ind_list <- list()
for (c in 1:m) {
MAF_ind <- MAF(2 * grid.g[, c, 1:p])
ind_rm <- which((MAF_ind < 0.01) == TRUE)
ind_list[[c]] <- ind_rm
L <- c(L, c(length(ind_rm)))
}
ind <- array(NA, c(p, m))
pval <- c()
for (c in 1:m) {
if (L[c] == p) {
burden_pval = SKAT(as.matrix(2 * grid.g[, c, ]), SKAT_Null, weights.beta = c(1, 25), r.corr = 1)$p.value
pval = c(pval, burden_pval)
ind[, c] <- 0
} else if (L[c] < p) {
if (L[c] == 0) {
U_V = eff_Score(y, grid.g[, c, ], Z = covar, Cauchy_Null, out_type = out_type)
score = colSums(U_V[[1]])^2/U_V[[2]]
pval = c(pval, 1 - pchisq(score, 1))
ind[, c] <- 1:p
} else {
grid.g_common = grid.g[, c, -ind_list[[c]]]
grid.g_rare = grid.g[, c, ind_list[[c]]]
U_V = eff_Score(y, grid.g_common, Z = covar, Cauchy_Null, out_type = out_type)
score = colSums(U_V[[1]])^2/U_V[[2]]
pval = c(pval, 1 - pchisq(score, 1))
burden_pval = SKAT(as.matrix(2 * grid.g_rare), SKAT_Null, weights.beta = c(1, 25), r.corr = 1)$p.value
pval = c(pval, burden_pval)
}
ind[ind_list[[c]], c] <- 0
ind[-ind_list[[c]], c] <- c(1:p)[-ind_list[[c]]]
}
}
out_type = "D"
ind <- array(NA, c(p, m))
pval <- c()
for (c in 1:m) {
if (L[c] == p) {
burden_pval = SKAT(as.matrix(2 * grid.g[, c, ]), SKAT_Null, weights.beta = c(1, 25), r.corr = 1)$p.value
pval = c(pval, burden_pval)
ind[, c] <- 0
} else if (L[c] < p) {
if (L[c] == 0) {
U_V = eff_Score(y, grid.g[, c, ], Z = covar, Cauchy_Null, out_type = out_type)
score = colSums(U_V[[1]])^2/U_V[[2]]
pval = c(pval, 1 - pchisq(score, 1))
ind[, c] <- 1:p
} else {
grid.g_common = grid.g[, c, -ind_list[[c]]]
grid.g_rare = grid.g[, c, ind_list[[c]]]
U_V = eff_Score(y, grid.g_common, Z = covar, Cauchy_Null, out_type = out_type)
score = colSums(U_V[[1]])^2/U_V[[2]]
pval = c(pval, 1 - pchisq(score, 1))
burden_pval = SKAT(as.matrix(2 * grid.g_rare), SKAT_Null, weights.beta = c(1, 25), r.corr = 1)$p.value
pval = c(pval, burden_pval)
}
ind[ind_list[[c]], c] <- 0
ind[-ind_list[[c]], c] <- c(1:p)[-ind_list[[c]]]
}
}
MAF_out <- c()
MAF_add <- MAF(g)
for (c in 1:m) {
if (L[c] != 0) {
MAF_temp <- c(MAF_add[which(ind[, c] != 0)], mean(MAF_add[which(ind[, c] == 0)]))
MAF_out <- c(MAF_out, MAF_temp)
} else {
MAF_temp <- c(MAF_add[which(ind[, c] != 0)])
MAF_out <- c(MAF_out, MAF_temp)
}
}
MAF_out = MAF_out[pval != 1]
pval = pval[pval != 1]
w = (dbeta(MAF_out, weights.beta[1], weights.beta[2]) * sqrt(MAF_out * (1 - MAF_out)))^2
w = w/sum(w)
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM/R")
formatR::tidy_dir()
setwd("/Users/Yeonil/Desktop/CauchyGM")
usethis::use_rcpp()
setwd("/Users/Yeonil/Desktop/CauchyGM")
Rcpp::compileAttributes()
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM")
Rcpp::compileAttributes()
devtools::document()
setwd("/Users/Yeonil/Desktop/CauchyGM")
devtools::check()
devtools::build()
devtools::build()
#devtools::install()
remove.packages("CauchyGM")
setwd("/Users/Yeonil/Desktop")
install.packages("CauchyGM_0.1.tar.gz",
repos = NULL, type = "source")
#devtools::install()
remove.packages("CauchyGM")
devtools::install_github("ykim03517/CauchyGM")
library(CauchyGM)
#devtools::install()
remove.packages("CauchyGM")
devtools::install_github("ykim03517/CauchyGM")
library(CauchyGM)
#library(testthat)
library(CauchyGM)
library(SKAT)
setwd("/Users/Yeonil/Desktop/CauchyGM")
load("/Users/Yeonil/Desktop/sysdata.rda")
data <- data_BT
colnames(data$Z) <- c("X1", "X2")
outcome <- "D"
formula <- ~ X1 + X2
Cauchy_Null <- Cauchy_Null_model(formula, data, out_type = outcome)
design.Z  <- model.matrix(formula, data.frame(data$Z))[, -1]
design.Z  <- model.matrix(formula, data.frame(data$Z))[, -1]
if(outcome == "D") {
SKAT_Null <- SKAT_Null_Model_MomentAdjust(data$Y ~ design.Z,
type.Resampling = "bootstrap.fast")
} else if (outcome == "C"){
SKAT_Null <- SKAT_Null_Model(data$Y ~ design.Z, out_type = outcome, Adjustment = TRUE,
type.Resampling = "bootstrap.fast")
}
CGM_pval <- CauchyGM(data, method = "CauchyGM", out_type = outcome, int = 0.5, weights.beta = c(1, 1),
Cauchy_Null = Cauchy_Null, SKAT_Null = SKAT_Null)
CauchyGM
remove.packages("CauchyGM")
devtools::install_github("ykim03517/CauchyGM")
library(CauchyGM)
load("/Users/Yeonil/Desktop/sysdata.rda")
CauchyGM
remove.packages("CauchyGM")
devtools::install_github("ykim03517/CauchyGM")
library(CauchyGM)
load("/Users/Yeonil/Desktop/sysdata.rda")
data <- data_BT
colnames(data$Z) <- c("X1", "X2")
outcome <- "D"
formula <- ~ X1 + X2
Cauchy_Null <- Cauchy_Null_model(formula, data, out_type = outcome)
design.Z  <- model.matrix(formula, data.frame(data$Z))[, -1]
if(outcome == "D") {
SKAT_Null <- SKAT_Null_Model_MomentAdjust(data$Y ~ design.Z,
type.Resampling = "bootstrap.fast")
} else if (outcome == "C"){
SKAT_Null <- SKAT_Null_Model(data$Y ~ design.Z, out_type = outcome, Adjustment = TRUE,
type.Resampling = "bootstrap.fast")
}
CGM_pval <- CauchyGM(data, method = "CauchyGM", out_type = outcome, int = 0.5, weights.beta = c(1, 1),
Cauchy_Null = Cauchy_Null, SKAT_Null = SKAT_Null)
